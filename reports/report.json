{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-04T02:54:28.457Z",
    "end": "2025-08-04T02:54:56.983Z",
    "duration": 28526,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "34803628-32d3-44c3-a6e1-0f1688f39849",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6223d008-45e6-489c-9ee2-225e2a7a4498",
          "title": "Suite de pruebas de Registro y Autenticación en CHROME",
          "fullFile": "C:\\Users\\denni\\OneDrive\\Desktop\\AutomatizacionDePruebas\\js-selenium\\src\\tests\\auth.test.js",
          "file": "\\src\\tests\\auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Suite de pruebas de Registro y Autenticación en CHROME\"",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en CHROME \"before each\" hook in \"Suite de pruebas de Registro y Autenticación en CHROME\"",
              "timedOut": false,
              "duration": 624,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fetch('http://localhost:3000/reset', { method: 'POST' });\ndriver = await new Builder().forBrowser(Browser.CHROME).build();",
              "err": {},
              "uuid": "36ba3e9b-6fab-47e2-83d6-61d21bda2eb8",
              "parentUUID": "6223d008-45e6-489c-9ee2-225e2a7a4498",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Suite de pruebas de Registro y Autenticación en CHROME\"",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en CHROME \"after each\" hook in \"Suite de pruebas de Registro y Autenticación en CHROME\"",
              "timedOut": false,
              "duration": 303,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testName = this.currentTest.title;\nawait takeScreenshot(driver, testName + '- CHROME');\nawait driver.quit();",
              "err": {},
              "uuid": "d7b28f9d-1bf8-4c01-8c15-481027c10f5a",
              "parentUUID": "6223d008-45e6-489c-9ee2-225e2a7a4498",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Login: Login correcto",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en CHROME Login: Login correcto",
              "timedOut": false,
              "duration": 535,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000');\nconst usernameInput = await waitForInput(driver, 'username');\nconst passwordInput = await waitForInput(driver, 'password');\nawait usernameInput.sendKeys(tc.username);\nawait passwordInput.sendKeys(tc.password);\nawait driver.findElement(By.css('button[type=\"submit\"]')).click();\nconst result = await driver.wait(until.elementLocated(By.id(tc.expectedId)), 5000);\nconst text = await result.getText();\nassert.equal(text, tc.expectedText);",
              "err": {},
              "uuid": "ec4dd15f-b2a7-4849-9b4e-0085e4327045",
              "parentUUID": "6223d008-45e6-489c-9ee2-225e2a7a4498",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login: Login incorrecto",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en CHROME Login: Login incorrecto",
              "timedOut": false,
              "duration": 326,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000');\nconst usernameInput = await waitForInput(driver, 'username');\nconst passwordInput = await waitForInput(driver, 'password');\nawait usernameInput.sendKeys(tc.username);\nawait passwordInput.sendKeys(tc.password);\nawait driver.findElement(By.css('button[type=\"submit\"]')).click();\nconst result = await driver.wait(until.elementLocated(By.id(tc.expectedId)), 5000);\nconst text = await result.getText();\nassert.equal(text, tc.expectedText);",
              "err": {},
              "uuid": "f2595b69-fa9d-45ab-b243-fc7178f6e408",
              "parentUUID": "6223d008-45e6-489c-9ee2-225e2a7a4498",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login: Bloqueo tras 3 intentos fallidos",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en CHROME Login: Bloqueo tras 3 intentos fallidos",
              "timedOut": false,
              "duration": 2258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000');\nfor (let i = 0; i < 3; i++) {\n  const usernameInput = await waitForInput(driver, 'username');\n  const passwordInput = await waitForInput(driver, 'password');\n  await usernameInput.sendKeys('admin');\n  await passwordInput.sendKeys('wrong');\n  await driver.findElement(By.css('button[type=\"submit\"]')).click();\n  const error = await driver.wait(until.elementLocated(By.id('error')), 5000);\n  const errorText = await error.getText();\n  assert.equal(errorText, 'Credenciales Incorrectas');\n  await driver.sleep(500); \n}\nconst usernameInput = await waitForInput(driver, 'username');\nconst passwordInput = await waitForInput(driver, 'password');\nawait usernameInput.sendKeys('admin');\nawait passwordInput.sendKeys('wrong');\nawait driver.findElement(By.css('button[type=\"submit\"]')).click();\nconst blocked = await driver.wait(until.elementLocated(By.id('blocked')), 5000);\nconst blockedText = await blocked.getText();\nassert.equal(blockedText, 'Demasiados intentos fallidos. Inténtalo más tarde.');",
              "err": {},
              "uuid": "017adff9-6fdc-4cce-b24c-106112f5a917",
              "parentUUID": "6223d008-45e6-489c-9ee2-225e2a7a4498",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Registro: Registro de usuario nuevo",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en CHROME Registro: Registro de usuario nuevo",
              "timedOut": false,
              "duration": 528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000/register');\nconst usernameInput = await waitForInput(driver, 'username');\nconst passwordInput = await waitForInput(driver, 'password');\nawait usernameInput.sendKeys(tc.username);\nawait passwordInput.sendKeys(tc.password);\nawait driver.findElement(By.css('button[type=\"submit\"]')).click();\nconst result = await driver.wait(until.elementLocated(By.id(tc.expectedId)), 5000);\nconst text = await result.getText();\nassert.equal(text, tc.expectedText);",
              "err": {},
              "uuid": "b8b1f2f5-f08c-410e-bfe8-943242956b32",
              "parentUUID": "6223d008-45e6-489c-9ee2-225e2a7a4498",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Registro: Registro de usuario existente",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en CHROME Registro: Registro de usuario existente",
              "timedOut": false,
              "duration": 331,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000/register');\nconst usernameInput = await waitForInput(driver, 'username');\nconst passwordInput = await waitForInput(driver, 'password');\nawait usernameInput.sendKeys(tc.username);\nawait passwordInput.sendKeys(tc.password);\nawait driver.findElement(By.css('button[type=\"submit\"]')).click();\nconst result = await driver.wait(until.elementLocated(By.id(tc.expectedId)), 5000);\nconst text = await result.getText();\nassert.equal(text, tc.expectedText);",
              "err": {},
              "uuid": "60e831df-1c62-49ee-964d-d67cfac49a4f",
              "parentUUID": "6223d008-45e6-489c-9ee2-225e2a7a4498",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec4dd15f-b2a7-4849-9b4e-0085e4327045",
            "f2595b69-fa9d-45ab-b243-fc7178f6e408",
            "017adff9-6fdc-4cce-b24c-106112f5a917",
            "b8b1f2f5-f08c-410e-bfe8-943242956b32",
            "60e831df-1c62-49ee-964d-d67cfac49a4f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3978,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9f1fae72-7b67-4177-aeca-20a542edb388",
          "title": "Suite de pruebas de Registro y Autenticación en FIREFOX",
          "fullFile": "C:\\Users\\denni\\OneDrive\\Desktop\\AutomatizacionDePruebas\\js-selenium\\src\\tests\\auth.test.js",
          "file": "\\src\\tests\\auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Suite de pruebas de Registro y Autenticación en FIREFOX\"",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en FIREFOX \"before each\" hook in \"Suite de pruebas de Registro y Autenticación en FIREFOX\"",
              "timedOut": false,
              "duration": 2119,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fetch('http://localhost:3000/reset', { method: 'POST' });\ndriver = await new Builder().forBrowser(Browser.FIREFOX).build();",
              "err": {},
              "uuid": "5b4c3ed8-9801-41c2-a3d4-714d57c7f02a",
              "parentUUID": "9f1fae72-7b67-4177-aeca-20a542edb388",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Suite de pruebas de Registro y Autenticación en FIREFOX\"",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en FIREFOX \"after each\" hook in \"Suite de pruebas de Registro y Autenticación en FIREFOX\"",
              "timedOut": false,
              "duration": 850,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testName = this.currentTest.title;\nawait takeScreenshot(driver, testName+'-FIREFOX');\nawait driver.quit();",
              "err": {},
              "uuid": "27c2b00a-700a-466e-bbff-afe2d7dc756a",
              "parentUUID": "9f1fae72-7b67-4177-aeca-20a542edb388",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Login: Login correcto",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en FIREFOX Login: Login correcto",
              "timedOut": false,
              "duration": 608,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000');\nconst usernameInput = await waitForInput(driver, 'username');\nconst passwordInput = await waitForInput(driver, 'password');\nawait usernameInput.sendKeys(tc.username);\nawait passwordInput.sendKeys(tc.password);\nawait driver.findElement(By.css('button[type=\"submit\"]')).click();\nconst result = await driver.wait(until.elementLocated(By.id(tc.expectedId)), 5000);\nconst text = await result.getText();\nassert.equal(text, tc.expectedText);",
              "err": {},
              "uuid": "9675847b-6b71-4ba8-a869-ff97dec4ec6c",
              "parentUUID": "9f1fae72-7b67-4177-aeca-20a542edb388",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login: Login incorrecto",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en FIREFOX Login: Login incorrecto",
              "timedOut": false,
              "duration": 494,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000');\nconst usernameInput = await waitForInput(driver, 'username');\nconst passwordInput = await waitForInput(driver, 'password');\nawait usernameInput.sendKeys(tc.username);\nawait passwordInput.sendKeys(tc.password);\nawait driver.findElement(By.css('button[type=\"submit\"]')).click();\nconst result = await driver.wait(until.elementLocated(By.id(tc.expectedId)), 5000);\nconst text = await result.getText();\nassert.equal(text, tc.expectedText);",
              "err": {},
              "uuid": "bd975cb0-d5de-4f06-bccf-dbff936d16ee",
              "parentUUID": "9f1fae72-7b67-4177-aeca-20a542edb388",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login: Bloqueo tras 3 intentos fallidos",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en FIREFOX Login: Bloqueo tras 3 intentos fallidos",
              "timedOut": false,
              "duration": 2157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000');\nfor (let i = 0; i < 3; i++) {\n  const usernameInput = await waitForInput(driver, 'username');\n  const passwordInput = await waitForInput(driver, 'password');\n  await usernameInput.sendKeys('admin');\n  await passwordInput.sendKeys('wrong');\n  await driver.findElement(By.css('button[type=\"submit\"]')).click();\n  const error = await driver.wait(until.elementLocated(By.id('error')), 5000);\n  const errorText = await error.getText();\n  assert.equal(errorText, 'Credenciales Incorrectas');\n  await driver.sleep(500); \n}\nconst usernameInput = await waitForInput(driver, 'username');\nconst passwordInput = await waitForInput(driver, 'password');\nawait usernameInput.sendKeys('admin');\nawait passwordInput.sendKeys('wrong');\nawait driver.findElement(By.css('button[type=\"submit\"]')).click();\nconst blocked = await driver.wait(until.elementLocated(By.id('blocked')), 5000);\nconst blockedText = await blocked.getText();\nassert.equal(blockedText, 'Demasiados intentos fallidos. Inténtalo más tarde.');",
              "err": {},
              "uuid": "2eef84f0-cdbb-47c3-a8bc-cff81f2f9a30",
              "parentUUID": "9f1fae72-7b67-4177-aeca-20a542edb388",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Registro: Registro de usuario nuevo",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en FIREFOX Registro: Registro de usuario nuevo",
              "timedOut": false,
              "duration": 414,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000/register');\nconst usernameInput = await waitForInput(driver, 'username');\nconst passwordInput = await waitForInput(driver, 'password');\nawait usernameInput.sendKeys(tc.username);\nawait passwordInput.sendKeys(tc.password);\nawait driver.findElement(By.css('button[type=\"submit\"]')).click();\nconst result = await driver.wait(until.elementLocated(By.id(tc.expectedId)), 5000);\nconst text = await result.getText();\nassert.equal(text, tc.expectedText);",
              "err": {},
              "uuid": "72e80fe0-fcc0-4d1a-94f2-84e83d911439",
              "parentUUID": "9f1fae72-7b67-4177-aeca-20a542edb388",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Registro: Registro de usuario existente",
              "fullTitle": "Suite de pruebas de Registro y Autenticación en FIREFOX Registro: Registro de usuario existente",
              "timedOut": false,
              "duration": 397,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000/register');\nconst usernameInput = await waitForInput(driver, 'username');\nconst passwordInput = await waitForInput(driver, 'password');\nawait usernameInput.sendKeys(tc.username);\nawait passwordInput.sendKeys(tc.password);\nawait driver.findElement(By.css('button[type=\"submit\"]')).click();\nconst result = await driver.wait(until.elementLocated(By.id(tc.expectedId)), 5000);\nconst text = await result.getText();\nassert.equal(text, tc.expectedText);",
              "err": {},
              "uuid": "6a883187-dff7-4aee-9f70-2289da366a46",
              "parentUUID": "9f1fae72-7b67-4177-aeca-20a542edb388",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9675847b-6b71-4ba8-a869-ff97dec4ec6c",
            "bd975cb0-d5de-4f06-bccf-dbff936d16ee",
            "2eef84f0-cdbb-47c3-a8bc-cff81f2f9a30",
            "72e80fe0-fcc0-4d1a-94f2-84e83d911439",
            "6a883187-dff7-4aee-9f70-2289da366a46"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4070,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "report",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}